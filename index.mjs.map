{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setNonEnumerableReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadWriteAccessor from '@stdlib/utils-define-read-write-accessor';\nimport accessors from '@stdlib/array-base-accessors';\nimport copy from '@stdlib/array-base-copy';\n\n\n// MAIN //\n\n/**\n* Zips one or more arrays to an array of composite views.\n*\n* ## Notes\n*\n* -   The function assumes that the list of arrays to be zipped all have the same length.\n* -   The list of provided array labels should equal the number of arrays to be zipped.\n* -   Each view in the returned array shares the same memory as the corresponding elements in the input arrays. Accordingly, mutation of either an input array or a view will mutate the other.\n*\n* @param {Collection<Collection>} arrays - list of arrays to be zipped\n* @param {ArrayLikeObject<string>} labels - list of array labels\n* @returns {Array<Object>} output array\n*\n* @example\n* var x = [ 1, 2, 3 ];\n* var y = [ 'a', 'b', 'c' ];\n*\n* var labels = [ 'x', 'y' ];\n*\n* var z = zip2views( [ x, y ], labels );\n* // returns [ <Object>, <Object>, <Object> ]\n*\n* var v0 = z[ 0 ].toJSON();\n* // returns { 'x': 1, 'y': 'a' }\n*\n* var v1 = z[ 1 ].toJSON();\n* // returns { 'x': 2, 'y': 'b' }\n*\n* var v2 = z[ 2 ].toJSON();\n* // returns { 'x': 3, 'y': 'c' }\n*\n* // Mutate one of the input arrays:\n* x[ 0 ] = 5;\n*\n* v0 = z[ 0 ].toJSON();\n* // returns { 'x': 5, 'y': 'a' }\n*\n* // Set a view property:\n* z[ 1 ].y = 'beep';\n*\n* v1 = z[ 1 ].toJSON();\n* // returns { 'x': 2, 'y': 'beep' }\n*\n* var y1 = y.slice();\n* // returns [ 'a', 'beep', 'c' ]\n*/\nfunction zip2views( arrays, labels ) {\n\tvar getter;\n\tvar setter;\n\tvar keys;\n\tvar out;\n\tvar acc;\n\tvar M;\n\tvar N;\n\tvar i;\n\tvar j;\n\n\tM = arrays.length;\n\tif ( M < 1 ) {\n\t\treturn [];\n\t}\n\tN = arrays[ 0 ].length;\n\tif ( N < 1 ) {\n\t\treturn [];\n\t}\n\t// Resolve element accessors...\n\tacc = [];\n\tfor ( j = 0; j < M; j++ ) {\n\t\tacc.push( accessors( arrays[ j ] ).accessors );\n\t}\n\t// Create a copy of provided labels to prevent external mutation:\n\tkeys = copy( labels );\n\n\t// eslint-disable-next-line stdlib/jsdoc-typedef-typos\n\t/**\n\t* Constructor for creating a composite view of zipped elements.\n\t*\n\t* @private\n\t* @constructor\n\t* @param {NonNegativeInteger} i - element index\n\t* @returns {Datum} datum instance\n\t*/\n\tfunction Datum( i ) {\n\t\tsetNonEnumerableReadOnly( this, '_i', i );\n\t\treturn this;\n\t}\n\n\t// Define read/write accessors for each label...\n\tfor ( j = 0; j < M; j++ ) {\n\t\tgetter = getValue( arrays[ j ], acc[ j ][ 0 ] );\n\t\tsetter = setValue( arrays[ j ], acc[ j ][ 1 ] );\n\t\tsetReadWriteAccessor( Datum.prototype, keys[ j ], getter, setter );\n\t}\n\t// Ensure that the returned array correctly serializes to JSON:\n\tsetNonEnumerableReadOnly( Datum.prototype, 'toJSON', toJSON );\n\n\t// Create a list of composite views...\n\tout = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tout.push( new Datum( i ) );\n\t}\n\treturn out;\n\n\t/**\n\t* Returns an accessor for returning the value associated with a label.\n\t*\n\t* @private\n\t* @param {Collection} arr - input array\n\t* @param {Function} getter - array element accessor\n\t* @returns {Function} accessor\n\t*/\n\tfunction getValue( arr, getter ) {\n\t\treturn get;\n\n\t\t/**\n\t\t* Returns the value associated with a label.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} result\n\t\t*/\n\t\tfunction get() {\n\t\t\treturn getter( arr, this._i ); // eslint-disable-line no-invalid-this\n\t\t}\n\t}\n\n\t/**\n\t* Returns an accessor for setting the value associated with a label.\n\t*\n\t* @private\n\t* @param {Collection} arr - input array\n\t* @param {Function} setter - array element accessor\n\t* @returns {Function} accessor\n\t*/\n\tfunction setValue( arr, setter ) {\n\t\treturn set;\n\n\t\t/**\n\t\t* Sets the value associated with a label.\n\t\t*\n\t\t* @private\n\t\t* @param {*} value - value to set\n\t\t*/\n\t\tfunction set( value ) {\n\t\t\tsetter( arr, this._i, value ); // eslint-disable-line no-invalid-this\n\t\t}\n\t}\n\n\t/**\n\t* Serializes a datum to JSON.\n\t*\n\t* @private\n\t* @returns {Object} JSON object\n\t*/\n\tfunction toJSON() {\n\t\tvar out;\n\t\tvar k;\n\t\tvar i;\n\n\t\tout = {};\n\t\tfor ( i = 0; i < M; i++ ) {\n\t\t\tk = keys[ i ];\n\t\t\tout[ k ] = this[ k ]; // eslint-disable-line no-invalid-this\n\t\t}\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default zip2views;\n"],"names":["zip2views","arrays","labels","getter","setter","keys","out","acc","M","N","i","j","length","push","accessors","Datum","setNonEnumerableReadOnly","this","copy","getValue","setValue","setReadWriteAccessor","prototype","k","arr","_i","value"],"mappings":";;4ZA4EA,SAASA,EAAWC,EAAQC,GAC3B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,IADAH,EAAIP,EAAOW,QACF,EACR,MAAO,GAGR,IADAH,EAAIR,EAAQ,GAAIW,QACP,EACR,MAAO,GAIR,IADAL,EAAM,GACAI,EAAI,EAAGA,EAAIH,EAAGG,IACnBJ,EAAIM,KAAMC,EAAWb,EAAQU,IAAMG,WAcpC,SAASC,EAAOL,GAEf,OADAM,EAA0BC,KAAM,KAAMP,GAC/BO,IACP,CAGD,IAjBAZ,EAAOa,EAAMhB,GAiBPS,EAAI,EAAGA,EAAIH,EAAGG,IACnBR,EAASgB,EAAUlB,EAAQU,GAAKJ,EAAKI,GAAK,IAC1CP,EAASgB,EAAUnB,EAAQU,GAAKJ,EAAKI,GAAK,IAC1CU,EAAsBN,EAAMO,UAAWjB,EAAMM,GAAKR,EAAQC,GAO3D,IAJAY,EAA0BD,EAAMO,UAAW,UA2D3C,WACC,IAAIhB,EACAiB,EACAb,EAGJ,IADAJ,EAAM,CAAA,EACAI,EAAI,EAAGA,EAAIF,EAAGE,IAEnBJ,EADAiB,EAAIlB,EAAMK,IACCO,KAAMM,GAElB,OAAOjB,CACP,IAnEDA,EAAM,GACAI,EAAI,EAAGA,EAAID,EAAGC,IACnBJ,EAAIO,KAAM,IAAIE,EAAOL,IAEtB,OAAOJ,EAUP,SAASa,EAAUK,EAAKrB,GACvB,OAQA,WACC,OAAOA,EAAQqB,EAAKP,KAAKQ,GACzB,CACD,CAUD,SAASL,EAAUI,EAAKpB,GACvB,OAQA,SAAcsB,GACbtB,EAAQoB,EAAKP,KAAKQ,GAAIC,EACtB,CACD,CAoBF"}