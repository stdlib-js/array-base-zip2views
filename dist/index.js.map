{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setNonEnumerableReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-read-write-accessor' );\nvar accessors = require( '@stdlib/array-base-accessors' );\nvar copy = require( '@stdlib/array-base-copy' );\n\n\n// MAIN //\n\n/**\n* Zips one or more arrays to an array of composite views.\n*\n* ## Notes\n*\n* -   The function assumes that the list of arrays to be zipped all have the same length.\n* -   The list of provided array labels should equal the number of arrays to be zipped.\n* -   Each view in the returned array shares the same memory as the corresponding elements in the input arrays. Accordingly, mutation of either an input array or a view will mutate the other.\n*\n* @param {Collection<Collection>} arrays - list of arrays to be zipped\n* @param {ArrayLikeObject<string>} labels - list of array labels\n* @returns {Array<Object>} output array\n*\n* @example\n* var x = [ 1, 2, 3 ];\n* var y = [ 'a', 'b', 'c' ];\n*\n* var labels = [ 'x', 'y' ];\n*\n* var z = zip2views( [ x, y ], labels );\n* // returns [ <Object>, <Object>, <Object> ]\n*\n* var v0 = z[ 0 ].toJSON();\n* // returns { 'x': 1, 'y': 'a' }\n*\n* var v1 = z[ 1 ].toJSON();\n* // returns { 'x': 2, 'y': 'b' }\n*\n* var v2 = z[ 2 ].toJSON();\n* // returns { 'x': 3, 'y': 'c' }\n*\n* // Mutate one of the input arrays:\n* x[ 0 ] = 5;\n*\n* v0 = z[ 0 ].toJSON();\n* // returns { 'x': 5, 'y': 'a' }\n*\n* // Set a view property:\n* z[ 1 ].y = 'beep';\n*\n* v1 = z[ 1 ].toJSON();\n* // returns { 'x': 2, 'y': 'beep' }\n*\n* var y1 = y.slice();\n* // returns [ 'a', 'beep', 'c' ]\n*/\nfunction zip2views( arrays, labels ) {\n\tvar getter;\n\tvar setter;\n\tvar list;\n\tvar keys;\n\tvar out;\n\tvar acc;\n\tvar M;\n\tvar N;\n\tvar i;\n\n\tM = arrays.length;\n\tif ( M < 1 ) {\n\t\treturn [];\n\t}\n\tlist = copy( arrays );\n\tN = list[ 0 ].length;\n\tif ( N < 1 ) {\n\t\treturn [];\n\t}\n\t// Resolve element accessors...\n\tacc = [];\n\tfor ( i = 0; i < M; i++ ) {\n\t\tacc.push( accessors( list[ i ] ).accessors );\n\t}\n\t// Create a copy of provided labels to prevent external mutation:\n\tkeys = copy( labels );\n\n\t// eslint-disable-next-line stdlib/jsdoc-typedef-typos\n\t/**\n\t* Constructor for creating a composite view of zipped elements.\n\t*\n\t* @private\n\t* @constructor\n\t* @param {NonNegativeInteger} i - element index\n\t* @returns {Datum} datum instance\n\t*/\n\tfunction Datum( i ) {\n\t\tsetNonEnumerableReadOnly( this, '_i', i );\n\t\treturn this;\n\t}\n\n\t// Define read/write accessors for each label...\n\tfor ( i = 0; i < M; i++ ) {\n\t\tgetter = getValue( list[ i ], acc[ i ][ 0 ] );\n\t\tsetter = setValue( list[ i ], acc[ i ][ 1 ] );\n\t\tsetReadWriteAccessor( Datum.prototype, keys[ i ], getter, setter );\n\t}\n\t// Ensure that the returned array correctly serializes to JSON:\n\tsetNonEnumerableReadOnly( Datum.prototype, 'toJSON', toJSON );\n\n\t// Create a list of composite views...\n\tout = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tout.push( new Datum( i ) );\n\t}\n\treturn out;\n\n\t/**\n\t* Returns an accessor for returning the value associated with a label.\n\t*\n\t* @private\n\t* @param {Collection} arr - input array\n\t* @param {Function} getter - array element accessor\n\t* @returns {Function} accessor\n\t*/\n\tfunction getValue( arr, getter ) {\n\t\treturn get;\n\n\t\t/**\n\t\t* Returns the value associated with a label.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} result\n\t\t*/\n\t\tfunction get() {\n\t\t\treturn getter( arr, this._i ); // eslint-disable-line no-invalid-this\n\t\t}\n\t}\n\n\t/**\n\t* Returns an accessor for setting the value associated with a label.\n\t*\n\t* @private\n\t* @param {Collection} arr - input array\n\t* @param {Function} setter - array element accessor\n\t* @returns {Function} accessor\n\t*/\n\tfunction setValue( arr, setter ) {\n\t\treturn set;\n\n\t\t/**\n\t\t* Sets the value associated with a label.\n\t\t*\n\t\t* @private\n\t\t* @param {*} value - value to set\n\t\t*/\n\t\tfunction set( value ) {\n\t\t\tsetter( arr, this._i, value ); // eslint-disable-line no-invalid-this\n\t\t}\n\t}\n\n\t/**\n\t* Serializes a datum to JSON.\n\t*\n\t* @private\n\t* @returns {Object} JSON object\n\t*/\n\tfunction toJSON() {\n\t\tvar out;\n\t\tvar k;\n\t\tvar i;\n\n\t\tout = {};\n\t\tfor ( i = 0; i < M; i++ ) {\n\t\t\tk = keys[ i ];\n\t\t\tout[ k ] = this[ k ]; // eslint-disable-line no-invalid-this\n\t\t}\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = zip2views;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Zip one or more arrays to an array of composite views.\n*\n* @module @stdlib/array-base-zip2views\n*\n* @example\n* var zip2views = require( '@stdlib/array-base-zip2views' );\n*\n* var x = [ 1, 2, 3 ];\n* var y = [ 'a', 'b', 'c' ];\n*\n* var labels = [ 'x', 'y' ];\n*\n* var z = zip2views( [ x, y ], labels );\n* // returns [ <Object>, <Object>, <Object> ]\n*\n* var v0 = z[ 0 ].toJSON();\n* // returns { 'x': 1, 'y': 'a' }\n*\n* var v1 = z[ 1 ].toJSON();\n* // returns { 'x': 2, 'y': 'b' }\n*\n* var v2 = z[ 2 ].toJSON();\n* // returns { 'x': 3, 'y': 'c' }\n*\n* // Mutate one of the input arrays:\n* x[ 0 ] = 5;\n*\n* v0 = z[ 0 ].toJSON();\n* // returns { 'x': 5, 'y': 'a' }\n*\n* // Set a view property:\n* z[ 1 ].y = 'beep';\n*\n* v1 = z[ 1 ].toJSON();\n* // returns { 'x': 2, 'y': 'beep' }\n*\n* var y1 = y.slice();\n* // returns [ 'a', 'beep', 'c' ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAA2B,QAAS,uDAAwD,EAC5FC,EAAuB,QAAS,0CAA2C,EAC3EC,EAAY,QAAS,8BAA+B,EACpDC,EAAO,QAAS,yBAA0B,EAmD9C,SAASC,EAAWC,EAAQC,EAAS,CACpC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAF,EAAIR,EAAO,OACNQ,EAAI,EACR,MAAO,CAAC,EAIT,GAFAJ,EAAON,EAAME,CAAO,EACpBS,EAAIL,EAAM,CAAE,EAAE,OACTK,EAAI,EACR,MAAO,CAAC,EAIT,IADAF,EAAM,CAAC,EACDG,EAAI,EAAGA,EAAIF,EAAGE,IACnBH,EAAI,KAAMV,EAAWO,EAAMM,CAAE,CAAE,EAAE,SAAU,EAG5CL,EAAOP,EAAMG,CAAO,EAWpB,SAASU,EAAOD,EAAI,CACnB,OAAAf,EAA0B,KAAM,KAAMe,CAAE,EACjC,IACR,CAGA,IAAMA,EAAI,EAAGA,EAAIF,EAAGE,IACnBR,EAASU,EAAUR,EAAMM,CAAE,EAAGH,EAAKG,CAAE,EAAG,CAAE,CAAE,EAC5CP,EAASU,EAAUT,EAAMM,CAAE,EAAGH,EAAKG,CAAE,EAAG,CAAE,CAAE,EAC5Cd,EAAsBe,EAAM,UAAWN,EAAMK,CAAE,EAAGR,EAAQC,CAAO,EAOlE,IAJAR,EAA0BgB,EAAM,UAAW,SAAUG,CAAO,EAG5DR,EAAM,CAAC,EACDI,EAAI,EAAGA,EAAID,EAAGC,IACnBJ,EAAI,KAAM,IAAIK,EAAOD,CAAE,CAAE,EAE1B,OAAOJ,EAUP,SAASM,EAAUG,EAAKb,EAAS,CAChC,OAAOc,EAQP,SAASA,GAAM,CACd,OAAOd,EAAQa,EAAK,KAAK,EAAG,CAC7B,CACD,CAUA,SAASF,EAAUE,EAAKZ,EAAS,CAChC,OAAOc,EAQP,SAASA,EAAKC,EAAQ,CACrBf,EAAQY,EAAK,KAAK,GAAIG,CAAM,CAC7B,CACD,CAQA,SAASJ,GAAS,CACjB,IAAIR,EACAa,EACAT,EAGJ,IADAJ,EAAM,CAAC,EACDI,EAAI,EAAGA,EAAIF,EAAGE,IACnBS,EAAId,EAAMK,CAAE,EACZJ,EAAKa,CAAE,EAAI,KAAMA,CAAE,EAEpB,OAAOb,CACR,CACD,CAKAZ,EAAO,QAAUK,IC1IjB,IAAIqB,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "setNonEnumerableReadOnly", "setReadWriteAccessor", "accessors", "copy", "zip2views", "arrays", "labels", "getter", "setter", "list", "keys", "out", "acc", "M", "N", "i", "Datum", "getValue", "setValue", "toJSON", "arr", "get", "set", "value", "k", "main"]
}
